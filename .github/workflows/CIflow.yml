name: Android CI

on:
  push:
    branches:
      - main
      - verification

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'
          cache: gradle

      # Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Build the project
      - name: Build with Gradle
        run: ./gradlew build

      # Run Lint Checks on main branch
      # - name: Run Lint Checks
      #   if: github.ref == 'refs/heads/main'
      #   run: ./gradlew lint

      # Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew test

      # Run Instrumentation Tests
      # All tests on main, subset on other branches
      - name: Run Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: default
          arch: x86_64
          script: |
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              ./gradlew connectedAndroidTest
            else
              ./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.example.package.SubsetInstrumentedTest
            fi

      # Send notification to Discord
      - name: Send notification to Discord
        if: always()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          STATUS: ${{ job.status }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
        run: |
          if [ "$STATUS" == "success" ]; then
            STATUS_TEXT="Success"
            COLOR="3066993"
          else
            STATUS_TEXT="Failed"
            COLOR="15158332"
          fi

          PAYLOAD=$(cat <<EOF
          {
            "username": "GitHub Actions",
            "embeds": [{
              "title": "Build $STATUS_TEXT",
              "color": $COLOR,
              "fields": [
                {
                  "name": "Branch",
                  "value": "$GITHUB_REF_NAME",
                  "inline": false
                },
                {
                  "name": "Commit",
                  "value": "$GITHUB_SHA",
                  "inline": false
                },
                {
                  "name": "Author",
                  "value": "$AUTHOR_NAME",
                  "inline": false
                },
                {
                  "name": "Message",
                  "value": "$COMMIT_MESSAGE",
                  "inline": false
                }
              ],
              "url": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            }]
          }
          EOF
          )

          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
